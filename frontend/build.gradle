apply plugin: 'kotlin-platform-js'
apply plugin: 'kotlinx-serialization'
apply plugin: "kotlin2js"
apply plugin: "kotlin-dce-js"
apply plugin: "com.moowork.node"

buildscript {

    ext.kotlinx_html_version='bootstrap-1.1.50-dev-1182-69'
    ext.react_version='0.0.3-kotlin-1.1.50-eap-18'
    ext.react_dom_version='0.0.5-kotlin-1.1.50-eap-18'

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
        mavenCentral()
    }
    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

node {
    download = true
}

repositories {
    maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
    maven { url "http://dl.bintray.com/kotlinx/kotlinx" }
    maven { url "http://dl.bintray.com/hypnosphi/kotlin-wrappers" }
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
    compile("org.jetbrains.kotlinx:kotlinx-html-js:$kotlinx_html_version") { force = true }
    compile "org.jetbrains:kotlin-react:$react_version"
    compile "org.jetbrains:kotlin-react-dom:$react_dom_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    expectedBy project(":common")
}

compileKotlin2Js {
    kotlinOptions {
        sourceMap = true
        sourceMapEmbedSources = "always"
        moduleKind = 'commonjs'
        metaInfo = false
    }
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

task copyStatic(type: Copy) {
    from "$project.projectDir/src/main/web"
    into "$buildDir/web"
}

task buildBundle(type: NpmTask, dependsOn: [npmInstall, runDceKotlinJs]) {
    args = ["run", "dist"]
}

task copyKotlinJs(type: Copy, dependsOn: compileKotlin2Js) {
    def workDir = "$buildDir/classes/kotlin/main"
    from(workDir) {
        include "*.js"
        include "*.js.map"
    }
    into "$workDir/dependencies"
}

task devBuild(dependsOn: [npmInstall, copyStatic, copyKotlinJs, runDceKotlinJs])

assemble.dependsOn buildBundle, copyStatic

afterEvaluate {
    copyKotlinJs.dependsOn copyDependenciesKotlinJs
}
